plugins {
    id 'org.springframework.boot' version '3.4.1' // Use the appropriate version
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'jacoco'
}

group = 'com.hector'
version = '1.0.0'
sourceCompatibility = '21' // Use your desired Java version


repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Google API Client
    implementation 'com.google.api-client:google-api-client:2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client:1.34.1'
    implementation 'com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0'
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.19.0'

    // Frontend Basic libraries
    implementation 'org.webjars:bootstrap:5.3.3'
    implementation 'org.webjars:jquery:3.7.1'

    // For JUnit tests, add the Lombok dependency for the test scope as well
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform() // Use JUnit 5
}

jacocoTestReport {
    dependsOn test // Generate the report after tests
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/hector/gdriveconsumerservice/demo/configuration/**',
                                        'com/hector/gdriveconsumerservice/demo/entity/**'])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            element = 'CLASS'  // Apply rule at the class level

            // Set the minimum required line coverage (e.g., 80%)
            limit {
                counter = 'LINE'
                minimum = 0.80  // Fail if coverage is below 80%
            }

            // Exclude specific packages from the coverage check
            excludes = [
                    'com.hector.gdriveconsumerservice.demo.configuration.*',  // Exclude all classes in config package
                    'com.hector.gdriveconsumerservice.demo.entity.*',     // Exclude DTO classes
            ]
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

tasks.register('runApp') {
    dependsOn assemble
    dependsOn test
    dependsOn jacocoTestCoverageVerification
    doLast {
        javaexec {
            mainClass = 'com.hector.gdriveconsumerservice.demo.GDriveConsumerApplication'
            classpath = sourceSets.main.runtimeClasspath
        }
    }
}
